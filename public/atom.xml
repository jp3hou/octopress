<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Julia Chou]]></title>
  <link href="http://jpchou.com/atom.xml" rel="self"/>
  <link href="http://jpchou.com/"/>
  <updated>2018-06-24T14:25:01-07:00</updated>
  <id>http://jpchou.com/</id>
  <author>
    <name><![CDATA[Julia Chou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sidekiq-ifying Emails at Reflektive]]></title>
    <link href="http://jpchou.com/blog/2018/06/24/sidekiq-ifying-emails-at-reflektive/"/>
    <updated>2018-06-24T11:01:11-07:00</updated>
    <id>http://jpchou.com/blog/2018/06/24/sidekiq-ifying-emails-at-reflektive</id>
    <content type="html"><![CDATA[<p>At Reflektive, we offer the option of sending reminder emails after kicking off performance review cycles in order to notify participants of that cycle that they should fill out their reviews. We used <a href='https://github.com/collectiveidea/delayed_job' target='blank'>Delayed::Job</a>, an asynchronous priority queue system pioneered by the Shopify engineering team, to handle the delivery of those emails.</p>

<p>However, we noticed that there was a huge bottleneck when it came to delivering emails to cycles with large numbers of participants. For instance, one company that had approximately 30,000 employees would clog up our worker queues for hours, preventing other companies from sending out their own emails while this large job was still being processed.</p>

<p>One solution might have been to just throw more hardware at it, to spin up more DJ workers to hammer through the job queues. However, we decided to explore the option of using <a href='https://github.com/mperham/sidekiq' target='blank'>Sidekiq</a> as an alternative asynchronous job processing system.</p>

<p>Some of the factors leading to choosing Sidekiq included the fact that Sidekiq has higher concurrency than Delayed::Job because it leverages threads as opposed to single processes.</p>

<p>In addition, Delayed::Job stores its queued jobs in a database table (in our case, Postgres) while they&rsquo;re waiting for a DJ worker to process it. We opted to pair Sidekiq with Redis, an in-memory datastore. This results in a much lower I/O cost because the threads processing Sidekiq jobs don&rsquo;t have to make database queries every time they fetch a new job.</p>

<p>Below are some of Sidekiq&rsquo;s performance statistics (obtained from their Github page)</p>

<p><img class="center" src="http://jpchou.com/images/sidekiq_performance.png"></p>

<p><br/></p>

<h3>Converting a Delayed::Job to Sidekiq</h3>


<p>The process for converting a Delayed::Job worker to Sidekiq was fairly straightforward. The general structure of our DJ email worker code looked something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class DelayedJobEmail
</span><span class='line'>  attr_reader :employee
</span><span class='line'>
</span><span class='line'>  def initialize(employee)
</span><span class='line'>    @employee = employee
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def perform
</span><span class='line'>    schedule_email(employee)
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'># Enqueueing this email job:
</span><span class='line'>job = DelayedJobEmail.new(Employee.find(123))
</span><span class='line'>Delayed::Job.enqueue(job)</span></code></pre></td></tr></table></div></figure>


<p>The equivalent Sidekiq implementation of that email worker would look like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class SidekiqEmail
</span><span class='line'>  include Sidekiq::Worker
</span><span class='line'>  sidekiq_options queue: :process_email
</span><span class='line'>
</span><span class='line'>  def perform(employee_id) # Note that Sidekiq does not accept Employee objects
</span><span class='line'>    employee = Employee.find(employee_id)
</span><span class='line'>    schedule_email(employee)
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'># Enqueueing this email job:
</span><span class='line'>SidekiqEmail.perform_async(123)</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s worth noting that Sidekiq will perform a JSON dump and load of arguments passed into its workers, so it only accepts pure JSON data types. This increases the consistency of data for edge cases where data has changed from underneath in the time that a job has spent enqueued and waiting for a worker to process it, but it will increase the total number of database calls made.</p>

<p><br/></p>

<h3>Testing Sidekiq Jobs</h3>


<p>Of course, for every piece of code, we have to write corresponding tests. Below are various methods of testing Sidekiq jobs in Minitest. They are all different ways of testing the same thing.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'sidekiq/testing'
</span><span class='line'>
</span><span class='line'>class SidekiqEmailTest
</span><span class='line'>  def setup
</span><span class='line'>    Sidekiq::Testing.fake! # Should be fake by default
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def teardown
</span><span class='line'>    Sidekiq::Worker.clear_all # Ensure jobs don't linger between tests
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  test '#perform delivers an email (Sidekiq fake mode)' do
</span><span class='line'>    SidekiqEmail.perform_async(123)
</span><span class='line'>    assert_equal(1, SidekiqEmail.jobs.size)
</span><span class='line'>    SidekiqEmailWorker.drain
</span><span class='line'>    # Assert that email was sent properly
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  test '#perform delivers an email (Sidekiq inline mode)' do
</span><span class='line'>    Sidekiq::Testing.inline! do
</span><span class='line'>      SidekiqEmail.perform_async(123)
</span><span class='line'>      # Assert that email was sent properly
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  test '#perform delivers an email (direct testing)' do
</span><span class='line'>    SidekiqEmail.new.perform(123)
</span><span class='line'>    # Assert that email was sent properly
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p><br/></p>

<h3>Configuring Sidekiq Workers</h3>


<p>Now that we have set up enqueueing Sidekiq jobs, it is a simple matter to spin up a process to start working on those jobs.
The Sidekiq rake command allows you to configure the concurrency, weight, and queues for each process as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle exec sidekiq -c 20 -q process_email,2 -q deliver_email,1</span></code></pre></td></tr></table></div></figure>


<p>The <code>-c</code> flag controls the concurrency of the worker, in this case, 20. The <code>-q</code> commands specify which queues this worker will be pulling jobs from, and the <code>,2</code> and <code>,1</code> after the queue names indicate the weighted priority given to these queues. In this case, jobs from the <code>process_email</code> queue will be processed twice as frequently as those from the <code>deliver_email</code> queue.</p>

<p><br/></p>

<h3>Monitoring Queues</h3>


<p>We use NewRelic to monitor our application&rsquo;s performance, and we wanted to be able to leverage NewRelic to provide further transparency and statistics for our new Sidekiq queues as well. To this end, we set up a Heroku dyno to continually publish our Sidekiq queue sizes as custom events to our NewRelic instance. This way, we can see whether or not a queue is backed up, investigate the causes of any bottlenecks that we observe, and determine whether or not we should allocate more workers to process jobs.</p>

<p>The code we used to publish custom NewRelic events looked something like as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>module QueueSizeMonitor
</span><span class='line'>  def self.publish_queue_information
</span><span class='line'>    Sidekiq::Queue.all.each do |queue|
</span><span class='line'>      publish(queue.name, queue.size)
</span><span class='line'>    end
</span><span class='line'>
</span><span class='line'>    publish('scheduled', ::Sidekiq::ScheduledSet.new.size)
</span><span class='line'>    publish('retries', ::Sidekiq::RetrySet.new.size)
</span><span class='line'>    publish('dead', ::Sidekiq::DeadSet.new.size)
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def self.publish(queue_name, queue_size)
</span><span class='line'>    ::NewRelic::Agent.record_custom_event('QueueSizeMonitor', name: queue_name, size: queue_size)
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>And afterwards, we were able to query those custom events in NewRelic and compile a chart to visualize how our Sidekiq queue sizes vary over time.</p>

<p><img class="center" src="http://jpchou.com/images/sidekiq_queue_size_newrelic.png" width="600"></p>

<p><br/></p>

<h3>Results and Next Steps</h3>


<p>After some monitoring, we discovered that switching from Delayed::Job to Sidekiq resulted in about a 4.5x improvement in throughput! We were able to complete a 30,000 employee email campaign in under an hour. We did hit some snags where we discovered that the concurrency we had set for our Sidekiq workers was a little too high and was resulting in a lot of open database connections at once, and we ended up scaling that down.</p>

<p>Moving forward, we are pushing to convert more Delayed::Job work over to Sidekiq.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rot13 in Ruby]]></title>
    <link href="http://jpchou.com/blog/2015/09/12/rot13-in-ruby/"/>
    <updated>2015-09-12T23:38:03-07:00</updated>
    <id>http://jpchou.com/blog/2015/09/12/rot13-in-ruby</id>
    <content type="html"><![CDATA[<p>Just for fun, I decided to try my hand at implementing a Rot13 program, which is a simple problem which takes
a string as its input and encodes it by moving each letter 13 characters forward or backward.
For example, since there are 26 letters in the alphabet, we can assign indices to each letter starting at <code>0</code> for <code>'a'</code>
and ending at <code>25</code> for <code>'z'</code>. The Rot13 program would switch (or rotate) the character <code>'a'</code> with <code>'n'</code> since it has the index <code>13</code>.</p>

<p>Giving this program the string input <code>'apple'</code> would (hopefully) return <code>'nccyr'</code>.</p>

<p>To that end, the following is the first pass I made at implementing the program:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Translator
</span><span class='line'>  ALPHABET = 'abcdefghijklmnopqrstuvwxyz'
</span><span class='line'>
</span><span class='line'>  def translate(string)
</span><span class='line'>    result = ''
</span><span class='line'>    string.split(//).each do |char|
</span><span class='line'>      if char == ' ' #preserve spaces if string has multiple words
</span><span class='line'>        result &lt;&lt; char
</span><span class='line'>        next
</span><span class='line'>      end
</span><span class='line'>      result &lt;&lt; translate_char(char)
</span><span class='line'>    end
</span><span class='line'>    result
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  private
</span><span class='line'>
</span><span class='line'>  def translate_char(char)
</span><span class='line'>    lowercase = char.downcase
</span><span class='line'>    is_uppercase = char != lowercase
</span><span class='line'>    index = ALPHABET.index lowercase
</span><span class='line'>    translated_index = index - 13
</span><span class='line'>    if translated_index &lt; 0
</span><span class='line'>      translated_index += 26
</span><span class='line'>    end
</span><span class='line'>
</span><span class='line'>    #preserve case in original string
</span><span class='line'>    if is_uppercase
</span><span class='line'>      ALPHABET[translated_index].upcase
</span><span class='line'>    else
</span><span class='line'>      ALPHABET[translated_index]
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<p>In this solution, I created a class <code>Translator</code> that defines constant <code>ALPHABET</code> string representing the alphabet and
an instance method <code>#translate</code> that takes in a string, splits it into an array of its characters, translates each character
using a private method <code>#translate_char</code>, and then returns a string composed of those translated characters.</p>

<p>The private <code>#translate_char</code> method checks the capitalization of the character, checks the index of the character against
the <code>ALPHABET</code> constant, and then rotates that character by returning the appropriate character in <code>ALPHABET</code> at that given index minus 13.</p>

<p>All in all, this got the job done.</p>

<p>However, I later discovered Ruby&rsquo;s <code>String#tr</code> method, which allows you to replace characters in a string. It is similar to
the <code>#gsub</code> method, but while <code>#gsub</code> can match complex patterns with complex results, <code>#tr</code> can only replace fixed characters.</p>

<p>In any case, you can call <code>'hello'.tr('el', 'ip')</code> to get the result <code>hippo</code> since it will replace every <code>'e'</code> with <code>'i'</code>
and every <code>'l'</code> with <code>'p'</code>.</p>

<p>It turns out that the above implementation can be greatly simplified by the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Translator
</span><span class='line'>  def translate(string)
</span><span class='line'>    string.tr('a-zA-Z', 'n-za-mN-ZA-M')
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Spaces and punctuation are preserved since it only checks the string for those characters and replaces
them accordingly, ignoring all else. I also realized at this point that my original solution would not have accounted for punctuation
or special characters and would have stripped them out in the result.</p>

<p>Using the <code>String#tr</code> method, I was able to simplify my ~30 line class down to 5 lines in a more idiomatic (and more effective!)
Ruby solution.</p>

<p>Pretty cool.</p>
]]></content>
  </entry>
  
</feed>
